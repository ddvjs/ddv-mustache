#!/usr/bin/env node
'use strict'
// 标题
process.title = 'ddvMustache'
const defaultCommand = 'dev'
const fs = require('fs')
const path = require('path')
const logger = require('../build/logger.js')
const rootDir = path.resolve('.', './')
const without = require('lodash').without
const DdvMustache = require('../ddv-mustache')
const ddvMustacheWebpackDev = require('../ddv-mustache-webpack-dev')

const commands = new Set([
  'start',
  'ddvstart',
  'dev',
  'ddvdev',
  'build',
  'generate',
  'autointidev'
])
var cmd = process.argv[2]
if (commands.has(cmd)) {
  process.argv.splice(2, 1)
} else if (!cmd) {
  cmd = defaultCommand
} else {
  logger.error('The command is not supported:  ' + cmd)
  process.exit(-1)
}

if (cmd === 'autointidev') {
  return ddvMustacheWebpackDev()
  .then(() => {
    process.exit(0)
  })
  .catch(e => {
    logger.error(e)
    process.exit(1)
  })
}

// --analyze option
var analyzeBuild = false
if (process.argv.indexOf('--analyze') !== -1 || process.argv.indexOf('-a') !== -1) {
  analyzeBuild = true
  process.argv = without(process.argv, '--analyze', '-a')
}

var siteConfigFileName = 'site.config.js'

// --config-file option
var indexOfConfig = false
if (process.argv.indexOf('--config-file') !== -1) {
  indexOfConfig = process.argv.indexOf('--config-file')
} else if (process.argv.indexOf('-c') !== -1) {
  indexOfConfig = process.argv.indexOf('-c')
}

if (indexOfConfig !== false) {
  siteConfigFileName = process.argv.slice(indexOfConfig)[1]
  process.argv = without(process.argv, '--config-file', '-c', siteConfigFileName)
}

// 尝试获取配置文件地址
var siteConfigFile = path.resolve(rootDir, siteConfigFileName)
if (!fs.existsSync(siteConfigFile) && siteConfigFileName !== 'site.config.js') {
  siteConfigFileName = 'site.config.js'
  // 再次参数获取
  siteConfigFile = path.resolve(rootDir, siteConfigFileName)
}
if (!fs.existsSync(siteConfigFile) && siteConfigFileName !== 'ddv.config.js') {
  // 再次参数获取
  siteConfigFile = path.resolve(rootDir, 'ddv.config.js')
}

var options = {}
if (fs.existsSync(siteConfigFile)) {
  options = require(siteConfigFile)
} else {
  console.log(`Could not locate ${siteConfigFile}`) // eslint-disable-line no-console
}// 引入配置信息-Import and Set Nuxt.js options

if (typeof options.rootDir !== 'string') {
  options.rootDir = rootDir
}
options.dev = false // Create production build when calling `nuxt build`

options.build = options.build || {}
if (analyzeBuild) {
  options.build.analyze = analyzeBuild
}

var ddvMustache
if (cmd === 'build' || cmd === 'generate' || cmd === 'start' || cmd === 'ddvstart') {
  process.env.NODE_ENV = 'production' // development
  options.dev = false // Create production build when calling `ddvMustache build`
} else {
  options.dev = true
}
// 编译模式
if (cmd === 'build') {
  console.log('[ddvMustache] Building...') // eslint-disable-line no-console
  ddvMustache = new DdvMustache(options)
  ddvMustache.build()
  .then(() => {
    console.log('[ddvMustache] Building done') // eslint-disable-line no-console
  })
  .catch((err) => {
    console.error(err) // eslint-disable-line no-console
    process.exit(1)
  })
// 生成模式
} else if (cmd === 'generate') {
  console.log('[ddvMustache] Generating...') // eslint-disable-line no-console
  ddvMustache = new DdvMustache(options)
  ddvMustache.generate()
  .then(() => {
    console.log('[ddvMustache] Generate done') // eslint-disable-line no-console
  })
  .catch((err) => {
    console.error(err) // eslint-disable-line no-console
    process.exit(1)
  })
} else if (cmd === 'start' || cmd === 'ddvstart' || cmd === 'dev' || cmd === 'ddvdev') {
  let server = require('../server')
  server.serverStart(siteConfigFile, options)
} else {
  console.error('This parameter is not supported')
  process.exit(1)
}
